import java.util.concurrent.Callable
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors

/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.2.1/userguide/tutorial_java_projects.html
 */
group 'trapx00'
version '1.0'

subprojects {
    group 'trapx00'
    version '1.0'

    apply plugin: 'java'
    apply plugin: 'application'

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    repositories {
        jcenter()
        mavenCentral()
    }

}


ExecutorService es = Executors.newSingleThreadExecutor()
OutputStream outputStream = new ServerOutputStream()

enum ServerStatus {
    Initializing,
    Initialized,
    PortsInUse
}

class ServerOutputStream extends OutputStream {
    private StringBuilder content = new StringBuilder()
    private static final String initializationCompleteFlag = "Initialization done."
    @Override
    void write(int b) throws IOException {
        content.append((char)(b.intValue()))
    }

    ServerStatus getStatus() {
        if (content.contains(initializationCompleteFlag)) {
            return ServerStatus.Initialized
        } else if (content.contains("Port already in use")) {
            return ServerStatus.PortsInUse
        } else {
            return ServerStatus.Initializing
        }
    }
}

project(':Lightx00.Server') {

    mainClassName = 'trapx00.lightx00.server.Server'

    dependencies {
        compile project(':Lightx00.Shared')
        compile 'com.j256.ormlite:ormlite-jdbc:5.0'
        compile 'org.xerial:sqlite-jdbc:3.21.0'
        compile 'com.amazonaws:aws-java-sdk-iam:1.11.78'
        compile 'com.amazonaws:aws-java-sdk-ec2:1.11.78'
        compile 'com.google.code.gson:gson:2.8.2'
        compile 'io.github.lukehutch:fast-classpath-scanner:2.9.3'
        testCompile group: 'junit', name: 'junit', version: '4.12'
    }

    task initServer() {
        es = Executors.newSingleThreadExecutor()
        outputStream = new ServerOutputStream()
        es.submit({
            project.javaexec {
                standardOutput = outputStream
                main = mainClassName
                classpath = sourceSets.main.runtimeClasspath
            }
        } as Callable)
        println 'Waiting for server to initialize...'
        int timeout = 60
        while (outputStream.getStatus() == ServerStatus.Initializing) {
            Thread.sleep 1000
            timeout -= 1
            if (timeout == 0) {
                throw new GradleException("Initialization failed")
            }
        }
        if (outputStream.getStatus() == ServerStatus.PortsInUse) {
            throw new GradleException("Ports in use. Retry.")
        }
        println 'Server initialized.'
    }
    initServer.dependsOn ':Lightx00.Server:assemble'

    task terminateServer() {
        println 'Terminating server...'
        if (!es.isTerminated()) {
            es.shutdown()
        }
    }
}

project(':Lightx00.Client') {
    apply plugin: 'java'
    check.dependsOn ':Lightx00.Server:initServer'

    check.finalizedBy ':Lightx00.Server:terminateServer'
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}
